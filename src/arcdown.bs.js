// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var spaces = "      ";

var source = "\n[NOTE]\n====\nThis is how to start a new example\nblock within this block:\n" + spaces + "\n.Nested block\n[example]\n====\nA small example\n====\n====\n\n[Go to Products page on this site](/Products.html)\n\n[Go to Offers page in current path](Offers.html)\n\n[Go to an arbitrary webpage](https://www.github.com)\n\n[#anchor]:\nPart 1: This text is selected by the anchor.\n\n[Go to Part 1](#anchor)\n\n____\nQuote text using\nunderscores\n____\n\n====\nExample block used to\nenclose an example\n====\n\n****\nSidebar block used to\nexpand on a topic or\nhighlight an idea\n****\n";

var alpha = "A-Za-z";

var alnum = "0-9" + alpha;

function getMatches(regex, someline) {
  var result = regex.exec(someline);
  if (result !== null) {
    return Belt_Array.map(result, (function (x) {
                  return Belt_Option.getWithDefault((x == null) ? undefined : Caml_option.some(x), "");
                }));
  } else {
    return [];
  }
}

var EndOfFile = /* @__PURE__ */Caml_exceptions.create("Arcdown.EndOfFile");

var lines = Js_string.split("\n", source);

function nextLine(lnum) {
  var line = Belt_Array.get(lines, lnum);
  if (line === undefined) {
    return Promise.reject({
                RE_EXN_ID: EndOfFile,
                _1: "EOF"
              });
  }
  var trimEnd = /(\s*[^\s]+)*\s*/;
  var match = getMatches(trimEnd, line);
  if (match.length !== 2) {
    return Promise.resolve([
                "",
                lnum + 1 | 0
              ]);
  }
  var line$1 = match[1];
  return Promise.resolve([
              line$1,
              lnum + 1 | 0
            ]);
}

function consumeTitle(line, subs) {
  var titleLine = /^=+\s+([^\s].*)/;
  var match = getMatches(titleLine, line);
  if (match.length !== 2) {
    return [
            false,
            subs
          ];
  }
  var title = match[1];
  console.log("TITLE: " + title);
  return [
          true,
          subs
        ];
}

function consumeSubstitution(line, lnum, subs) {
  var pattern = "^:([" + alpha + "]+(\\.[_" + alnum + "]+)*):\\s*(.*)";
  var substLine = new RegExp(pattern);
  var match = getMatches(substLine, line);
  if (match.length !== 4) {
    return [
            false,
            lnum,
            subs
          ];
  }
  var name = match[1];
  var value = match[3];
  console.log("SUBST: " + name + " --> " + value);
  return [
          true,
          lnum,
          Belt_List.add(subs, [
                name,
                value
              ])
        ];
}

function consumeAttribute(line, subs) {
  var attrLine = /^\[\s*([^\[\]]*)\]\s*$/;
  var match = getMatches(attrLine, line);
  if (match.length !== 2) {
    return [
            false,
            subs,
            ""
          ];
  }
  var attributes = match[1];
  return [
          true,
          subs,
          attributes
        ];
}

function consumeHyperlink(line, param, param$1) {
  var hlinkLine = /\[\s*([^\]]*)\]\(\s*([^\s\)]*)\s*\)/;
  var match = getMatches(hlinkLine, line);
  if (match.length !== 3) {
    return [
            false,
            "",
            ""
          ];
  }
  var text = match[1];
  var link = match[2];
  return [
          true,
          text,
          link
        ];
}

function consumeLabel(line) {
  var labelLine = /^\[\s*([^\]]+)\]:\s*$/;
  var match = getMatches(labelLine, line);
  if (match.length !== 2) {
    return [
            false,
            ""
          ];
  }
  var label = match[1];
  return [
          true,
          label
        ];
}

function consumeNormalLine(line, param, param$1) {
  console.log("TEXT: " + line);
}

var EndOfBlock = /* @__PURE__ */Caml_exceptions.create("Arcdown.EndOfBlock");

function consumeRegularBlock(name, firstChar, delimiter, line, lnum, subs, attrs) {
  var blockLine = new RegExp("^" + delimiter + "\s*$");
  var match = getMatches(blockLine, line);
  if (match.length !== 1) {
    return Promise.resolve([
                lnum,
                subs,
                attrs
              ]);
  }
  console.log("BLOCK: " + name + " with attributes: " + attrs + "");
  var checkEndBlock = function (ln, attrs) {
    if (attrs === "") {
      return getMatches(blockLine, ln).length !== 0;
    } else {
      return false;
    }
  };
  var promi = function (param) {
    var attrs = param[2];
    var subs = param[1];
    var lnum = param[0];
    return $$Promise.$$catch(consumeLine(lnum, subs, attrs, firstChar, checkEndBlock).then(promi), (function (err) {
                  if (err.RE_EXN_ID === EndOfBlock) {
                    console.log("BLOCK: " + name + " ended at line " + String(lnum) + "");
                    return Promise.resolve([
                                lnum + 1 | 0,
                                subs,
                                attrs
                              ]);
                  } else if (err.RE_EXN_ID === EndOfFile) {
                    console.log("WARNING: " + name + " block not closed");
                    return Promise.reject(err);
                  } else {
                    console.log("WARNING: Unexpected error");
                    return Promise.reject(err);
                  }
                }));
  };
  return promi([
              lnum,
              subs,
              attrs
            ]);
}

function consumeLine(lnum, subs, attrs, endchar, confirm) {
  var firstChar = /^./;
  return nextLine(lnum).then(function (param) {
              var lnum = param[1];
              var line = param[0];
              var m = getMatches(firstChar, line);
              var len = m.length;
              if (len !== 1) {
                if (len !== 0) {
                  console.log("Unexpected! " + String(m.length));
                  return Promise.resolve([
                              lnum,
                              subs,
                              ""
                            ]);
                } else {
                  console.log("<empty>");
                  return Promise.resolve([
                              lnum,
                              subs,
                              attrs
                            ]);
                }
              }
              var chara = m[0];
              if (endchar === chara && Curry._2(confirm, line, attrs)) {
                return Promise.reject({
                            RE_EXN_ID: EndOfBlock,
                            _1: chara
                          });
              }
              switch (chara) {
                case "*" :
                    console.log("Maybe a list item");
                    return consumeRegularBlock("Sidebar", chara, "\\*\\*\\*\\*", line, lnum, subs, attrs).then(function (param) {
                                var subs = param[1];
                                var next = param[0];
                                if (next === lnum) {
                                  consumeNormalLine(line, subs, param[2]);
                                }
                                return Promise.resolve([
                                            next,
                                            subs,
                                            ""
                                          ]);
                              });
                case ":" :
                    console.log("Maybe a substitution");
                    var match = consumeSubstitution(line, lnum, subs);
                    if (match[0]) {
                      return Promise.resolve([
                                  match[1],
                                  match[2],
                                  ""
                                ]);
                    } else {
                      consumeNormalLine(line, subs, attrs);
                      return Promise.resolve([
                                  lnum,
                                  subs,
                                  ""
                                ]);
                    }
                case "=" :
                    console.log("Maybe a title");
                    var match$1 = consumeTitle(line, subs);
                    if (match$1[0]) {
                      return Promise.resolve([
                                  lnum,
                                  match$1[1],
                                  ""
                                ]);
                    } else {
                      return consumeRegularBlock("Example", chara, "====", line, lnum, subs, attrs).then(function (param) {
                                  var subs = param[1];
                                  var next = param[0];
                                  if (next === lnum) {
                                    consumeNormalLine(line, subs, param[2]);
                                  }
                                  return Promise.resolve([
                                              next,
                                              subs,
                                              ""
                                            ]);
                                });
                    }
                case "[" :
                    console.log("Maybe an attribute");
                    var match$2 = consumeAttribute(line, subs);
                    var attributes = match$2[2];
                    if (match$2[0]) {
                      console.log("ATTR: " + attributes);
                      return Promise.resolve([
                                  lnum,
                                  match$2[1],
                                  attributes
                                ]);
                    }
                    var match$3 = consumeHyperlink(line, subs, attrs);
                    if (match$3[0]) {
                      console.log("LINK: <" + match$3[2] + "> with text: '" + match$3[1] + "' and attributes: " + attrs);
                      return Promise.resolve([
                                  lnum,
                                  subs,
                                  ""
                                ]);
                    }
                    var match$4 = consumeLabel(line);
                    if (match$4[0]) {
                      console.log("LABEL: " + match$4[1]);
                      return Promise.resolve([
                                  lnum,
                                  subs,
                                  ""
                                ]);
                    } else {
                      consumeNormalLine(line, subs, attrs);
                      return Promise.resolve([
                                  lnum,
                                  subs,
                                  ""
                                ]);
                    }
                case "_" :
                    console.log("Maybe a quote block");
                    return consumeRegularBlock("Quote", chara, "____", line, lnum, subs, attrs).then(function (param) {
                                var subs = param[1];
                                var next = param[0];
                                if (next === lnum) {
                                  consumeNormalLine(line, subs, param[2]);
                                }
                                return Promise.resolve([
                                            next,
                                            subs,
                                            ""
                                          ]);
                              });
                default:
                  console.log("Something else");
                  return Promise.resolve([
                              lnum,
                              subs,
                              ""
                            ]);
              }
            });
}

var attrs = "";

function promi(param) {
  return $$Promise.$$catch($$Promise.$$catch(consumeLine(param[0], param[1], param[2], "$", (function (param, param$1) {
                          return false;
                        })), (function (err) {
                      if (err.RE_EXN_ID === EndOfFile) {
                        console.log("DONE");
                        return Promise.reject(err);
                      } else {
                        console.log("Unexpected error");
                        return Promise.reject(err);
                      }
                    })).then(promi), (function (param) {
                return Promise.resolve(undefined);
              }));
}

promi([
      0,
      /* [] */0,
      attrs
    ]);

var backtick = "`";

var subs = /* [] */0;

var lnum = 0;

exports.backtick = backtick;
exports.spaces = spaces;
exports.source = source;
exports.alpha = alpha;
exports.alnum = alnum;
exports.getMatches = getMatches;
exports.EndOfFile = EndOfFile;
exports.lines = lines;
exports.nextLine = nextLine;
exports.consumeTitle = consumeTitle;
exports.consumeSubstitution = consumeSubstitution;
exports.consumeAttribute = consumeAttribute;
exports.consumeHyperlink = consumeHyperlink;
exports.consumeLabel = consumeLabel;
exports.consumeNormalLine = consumeNormalLine;
exports.EndOfBlock = EndOfBlock;
exports.consumeRegularBlock = consumeRegularBlock;
exports.consumeLine = consumeLine;
exports.subs = subs;
exports.attrs = attrs;
exports.lnum = lnum;
exports.promi = promi;
/* lines Not a pure module */
