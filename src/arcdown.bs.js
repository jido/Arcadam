// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var source = "\n[NOTE]\n====\nThis is how to start a new example\nblock within this block:\n\n[example]\n====\n.Nested block<\nA small example\n====\n====\n\n:subs: value&more\n== Arcdown Test ->> part 1\n\n[Go to Products page on this site](/Products.html)\n\n[Go to Offers page in current path](Offers.html)\n\n[Go to an arbitrary webpage](https://www.github.com)\n\n[#anchor]:\nPart 1: This text is selected by the anchor.\n\n[<Go to Part 1>](#anchor)\n\n____\nQuote text using\nunderscores\n____\n\n====\nExample block used to\nenclose an example\n====\n\n****\nSidebar block used to\nexpand on a topic or\nhighlight an idea\n****\n\n* First<\nmulti line\n* Second&&\n** sublist\n** one more\n... nested numbered list\n... nested 2\n* Third\n[list]\n. Number one\n";

var alpha = "A-Za-z";

var alnum = "0-9" + alpha;

function getMatches(regex, someline) {
  var result = regex.exec(someline);
  if (result !== null) {
    return Belt_Array.map(result, (function (x) {
                  return Belt_Option.getWithDefault((x == null) ? undefined : Caml_option.some(x), "");
                }));
  } else {
    return [];
  }
}

var EndOfFile = /* @__PURE__ */Caml_exceptions.create("Arcdown.EndOfFile");

var lines = Js_string.split("\n", source);

function nextLine(lnum) {
  var line = Belt_Array.get(lines, lnum);
  if (line === undefined) {
    return Promise.reject({
                RE_EXN_ID: EndOfFile,
                _1: "EOF"
              });
  }
  var trimEnd = /^((\s*[^\s]+)*)\s*$/;
  var match = getMatches(trimEnd, line);
  if (match.length !== 3) {
    return Promise.resolve([
                "",
                lnum + 1 | 0
              ]);
  }
  var line$1 = match[1];
  return Promise.resolve([
              line$1,
              lnum + 1 | 0
            ]);
}

function specialCharsStep(text) {
  var result = Js_string.replaceByRe(/&/g, "&amp;", text);
  var result$1 = Js_string.replaceByRe(/</g, "&lt;", result);
  return Js_string.replaceByRe(/>/g, "&gt;", result$1);
}

function consumeBlockTitle(line) {
  var blockTitleLine = /^\.([^\s].*)$/;
  var match = getMatches(blockTitleLine, line);
  if (match.length !== 2) {
    return [];
  }
  var title = match[1];
  return [{
            TAG: /* BlockTitle */8,
            _0: title
          }];
}

function consumeHeading(line) {
  var titleLine = /^(=+)\s+([^\s].*)$/;
  var match = getMatches(titleLine, line);
  if (match.length !== 3) {
    return [];
  }
  var signs = match[1];
  var title = match[2];
  var level = signs.length;
  return [
          {
            TAG: /* Heading */1,
            _0: level
          },
          {
            TAG: /* Text */0,
            _0: title
          }
        ];
}

function consumeSubstitution(line) {
  var pattern = "^:([" + alpha + "][_" + alnum + "]*(\\.[_" + alnum + "]+)*):\\s+(.*)\$";
  var substLine = new RegExp(pattern);
  var match = getMatches(substLine, line);
  if (match.length !== 4) {
    return [];
  }
  var name = match[1];
  var value = match[3];
  return [
          {
            TAG: /* SubstitutionDef */6,
            _0: name
          },
          {
            TAG: /* Text */0,
            _0: value
          }
        ];
}

function consumeAttribute(line) {
  var attrLine = /^\[\s*([^\[\]]*)\]$/;
  var match = getMatches(attrLine, line);
  if (match.length !== 2) {
    return [];
  }
  var attributes = match[1];
  return [{
            TAG: /* Attribute */2,
            _0: attributes
          }];
}

function consumeHyperlink(line) {
  var hlinkLine = /\[\s*([^\]]*)\]\(\s*([^\s\)]*)\s*\)/;
  var match = getMatches(hlinkLine, line);
  if (match.length !== 3) {
    return [];
  }
  var text = match[1];
  var link = match[2];
  return [
          {
            TAG: /* Hyperlink */7,
            _0: link
          },
          {
            TAG: /* Text */0,
            _0: text
          }
        ];
}

function consumeLabel(line) {
  var labelLine = /^\[\s*([^\]]+)\]:\s*$/;
  var match = getMatches(labelLine, line);
  if (match.length !== 2) {
    return [];
  }
  var label = match[1];
  return [{
            TAG: /* Label */5,
            _0: label
          }];
}

function consumeBulletListItem(line) {
  var itemLine = /^\s*([*]+)\s+(.*)$/;
  var match = getMatches(itemLine, line);
  if (match.length !== 3) {
    return [];
  }
  var stars = match[1];
  var text = match[2];
  var level = stars.length;
  return [
          {
            TAG: /* BulletListItem */3,
            _0: level
          },
          {
            TAG: /* Text */0,
            _0: text
          }
        ];
}

function consumeNumberedListItem(line) {
  var itemLine = /^\s*([.]+)\s+(.*)$/;
  var match = getMatches(itemLine, line);
  if (match.length !== 3) {
    return [];
  }
  var dots = match[1];
  var text = match[2];
  var level = dots.length;
  return [
          {
            TAG: /* NumberedListItem */4,
            _0: level
          },
          {
            TAG: /* Text */0,
            _0: text
          }
        ];
}

function consumeBlockDelimiter(line) {
  switch (line) {
    case "" :
        return [/* Empty */0];
    case "****" :
        return [/* SidebarBlockDelimiter */5];
    case "--" :
        return [/* FreeBlockDelimiter */1];
    case "====" :
        return [/* ExampleBlockDelimiter */3];
    case "____" :
        return [/* QuoteBlockDelimiter */4];
    default:
      return [];
  }
}

function consumeRegularLine(line) {
  var chara = Js_string.charAt(0, line);
  var tok;
  switch (chara) {
    case "*" :
        tok = consumeBulletListItem(line);
        break;
    case "." :
        tok = consumeNumberedListItem(line);
        break;
    case "[" :
        tok = consumeHyperlink(line);
        break;
    default:
      tok = [];
  }
  if (Caml_obj.equal(tok, [])) {
    return [{
              TAG: /* Text */0,
              _0: line
            }];
  } else {
    return tok;
  }
}

var EndOfBlock = /* @__PURE__ */Caml_exceptions.create("Arcdown.EndOfBlock");

function consumeInitialLine(tok, lnum) {
  return nextLine(lnum).then(function (param) {
              var lnum = param[1];
              var line = param[0];
              var tokens = consumeBlockDelimiter(line);
              if (tokens.length !== 0) {
                return Promise.resolve([
                            Belt_Array.concat(tok, tokens),
                            true,
                            lnum
                          ]);
              }
              var chara = Js_string.charAt(0, line);
              switch (chara) {
                case "." :
                    var tokens$1 = consumeBlockTitle(line);
                    if (tokens$1.length === 1) {
                      var title = tokens$1[0];
                      if (typeof title !== "number" && title.TAG === /* BlockTitle */8) {
                        return Promise.resolve([
                                    Belt_Array.concat(tok, tokens$1),
                                    true,
                                    lnum
                                  ]);
                      }
                      
                    }
                    if (!Caml_obj.equal(tokens$1, [])) {
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "arcdown.res",
                              266,
                              10
                            ],
                            Error: new Error()
                          };
                    }
                    var tokens$2 = consumeRegularLine(line);
                    return Promise.resolve([
                                Belt_Array.concat(tok, tokens$2),
                                false,
                                lnum
                              ]);
                case ":" :
                    var tokens$3 = consumeSubstitution(line);
                    if (tokens$3.length === 2) {
                      var name = tokens$3[0];
                      if (typeof name !== "number" && name.TAG === /* SubstitutionDef */6) {
                        var value = tokens$3[1];
                        if (typeof value !== "number" && value.TAG === /* Text */0) {
                          return Promise.resolve([
                                      Belt_Array.concat(tok, tokens$3),
                                      true,
                                      lnum
                                    ]);
                        }
                        
                      }
                      
                    }
                    if (!Caml_obj.equal(tokens$3, [])) {
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "arcdown.res",
                              285,
                              10
                            ],
                            Error: new Error()
                          };
                    }
                    return Promise.resolve([
                                consumeRegularLine(line),
                                false,
                                lnum
                              ]);
                case "=" :
                    var tokens$4 = consumeHeading(line);
                    if (Caml_obj.notequal(tokens$4, [])) {
                      return Promise.resolve([
                                  Belt_Array.concat(tok, tokens$4),
                                  false,
                                  lnum
                                ]);
                    }
                    var tokens$5 = consumeRegularLine(line);
                    return Promise.resolve([
                                Belt_Array.concat(tok, tokens$5),
                                false,
                                lnum
                              ]);
                case "[" :
                    var tokens$6 = consumeAttribute(line);
                    if (tokens$6.length === 1) {
                      var attributes = tokens$6[0];
                      if (typeof attributes !== "number" && attributes.TAG === /* Attribute */2) {
                        return Promise.resolve([
                                    Belt_Array.concat(tok, tokens$6),
                                    false,
                                    lnum
                                  ]);
                      }
                      
                    }
                    if (!Caml_obj.equal(tokens$6, [])) {
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "arcdown.res",
                              293,
                              10
                            ],
                            Error: new Error()
                          };
                    }
                    var tokens$7 = consumeLabel(line);
                    if (Caml_obj.notequal(tokens$7, [])) {
                      return Promise.resolve([
                                  Belt_Array.concat(tok, tokens$7),
                                  true,
                                  lnum
                                ]);
                    }
                    var tokens$8 = consumeRegularLine(line);
                    return Promise.resolve([
                                Belt_Array.concat(tok, tokens$8),
                                false,
                                lnum
                              ]);
                    break;
                default:
                  var tokens$9 = consumeRegularLine(line);
                  return Promise.resolve([
                              Belt_Array.concat(tok, tokens$9),
                              false,
                              lnum
                            ]);
              }
            });
}

function consumeLine(tok, lnum) {
  return nextLine(lnum).then(function (param) {
              var lnum = param[1];
              var line = param[0];
              var tokens = consumeBlockDelimiter(line);
              if (tokens.length !== 0) {
                return Promise.resolve([
                            Belt_Array.concat(tok, tokens),
                            true,
                            lnum
                          ]);
              }
              var tokens$1 = consumeAttribute(line);
              if (tokens$1.length === 1) {
                var attributes = tokens$1[0];
                if (typeof attributes !== "number" && attributes.TAG === /* Attribute */2) {
                  return Promise.resolve([
                              Belt_Array.concat(tok, tokens$1),
                              false,
                              lnum
                            ]);
                }
                
              }
              if (!Caml_obj.equal(tokens$1, [])) {
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "arcdown.res",
                        320,
                        8
                      ],
                      Error: new Error()
                    };
              }
              var tokens$2 = consumeRegularLine(line);
              return Promise.resolve([
                          Belt_Array.concat(tok, tokens$2),
                          false,
                          lnum
                        ]);
            });
}

var Success = /* @__PURE__ */Caml_exceptions.create("Arcdown.Success");

function promi(param) {
  var lnum = param[2];
  var tok = param[0];
  return $$Promise.$$catch($$Promise.$$catch($$Promise.$$catch(param[1] ? consumeInitialLine(tok, lnum) : consumeLine(tok, lnum), (function ($$event) {
                          if ($$event.RE_EXN_ID === EndOfFile) {
                            return Promise.reject({
                                        RE_EXN_ID: Success,
                                        _1: tok
                                      });
                          } else {
                            return Promise.reject($$event);
                          }
                        })), (function (err) {
                      if (err.RE_EXN_ID === Success) {
                        var tokens = err._1;
                        Belt_Array.forEach(tokens, (function (token) {
                                console.log("T: ", token);
                              }));
                        console.log("DONE " + String(tokens.length) + "");
                        return Promise.reject(err);
                      }
                      console.log("Unexpected error");
                      return Promise.reject(err);
                    })).then(promi), (function (param) {
                return Promise.resolve(undefined);
              }));
}

promi([
      [],
      true,
      0
    ]);

var backtick = "`";

var spaces = "      ";

var outputFormat = /* Html */0;

var subs = /* [] */0;

var attrs = "";

var lnum = 0;

exports.backtick = backtick;
exports.spaces = spaces;
exports.source = source;
exports.alpha = alpha;
exports.alnum = alnum;
exports.getMatches = getMatches;
exports.EndOfFile = EndOfFile;
exports.lines = lines;
exports.nextLine = nextLine;
exports.outputFormat = outputFormat;
exports.specialCharsStep = specialCharsStep;
exports.consumeBlockTitle = consumeBlockTitle;
exports.consumeHeading = consumeHeading;
exports.consumeSubstitution = consumeSubstitution;
exports.consumeAttribute = consumeAttribute;
exports.consumeHyperlink = consumeHyperlink;
exports.consumeLabel = consumeLabel;
exports.consumeBulletListItem = consumeBulletListItem;
exports.consumeNumberedListItem = consumeNumberedListItem;
exports.consumeBlockDelimiter = consumeBlockDelimiter;
exports.consumeRegularLine = consumeRegularLine;
exports.EndOfBlock = EndOfBlock;
exports.consumeInitialLine = consumeInitialLine;
exports.consumeLine = consumeLine;
exports.subs = subs;
exports.attrs = attrs;
exports.lnum = lnum;
exports.Success = Success;
exports.promi = promi;
/* lines Not a pure module */
