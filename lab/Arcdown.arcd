[!image logo](Arcadam%20logo%20small.png)

# Arcadam

A lightweight markup language to format documents using plain text

## Syntax

The syntax of Arcadam is heavily inspired by AsciiDoc and by Markdown.

### Headers

```
# Document Title

## Level 1 Section Title

### Level 2 Section Title...
```

Use "#" in front of the header, repeated as needed to increase the level.

There must be only one document title in the document. The document title may be followed immediately by an
optional document header which contains metadata related to the document, such
as the authors or a marker for the generator to insert a table of contents.

Example:

```
# Document title
:key:authors Author Name <author@email.org>
:key:revision v2.0, 2019-03-22
:key:toc
```

### Paragraphs

A sequence of non-empty lines form a paragraph.

To force a line break in the middle of a paragraph, end the line with "+".

Example:

```
This is part of a single
paragraph spread over
multiple lines of text. +
Because of the line break, this goes on a separate line.
```

Paragraphs may be grouped in a free block by enclosing them with "--".

Example:

```
--
This is the first paragraph.

Another paragraph is added
to the block.
--
```

A paragraph must be followed by an empty line or an indented line. If the
paragraph is at the end of a block, then the empty or indented line can
come after the end block marker. In practice, that means it is better to
separate paragraphs with empty lines and always leave an empty line after
a block.

### Text Formatting

[code=asciidoc]
```
This is *bold*

This is _italic_

This is `monospaced`

This is ^superscript^

This is ~subscript~

This is #highlighted#

This is +_normal text_ (no style)+
```

Styles can be combined. Any style can be used in the middle of a word by
doubling the format markers, except for superscript and subscript which
don't require doubling.

Example:

[code=asciidoc]
```
*_Combine bold and italic_*

the "it" is __it__alic

superscri^pt^ for "pt"
```

To enter text which contains format markers, enclose the text with "+" to prevent
the generator from interpreting them.

When applying multiple styles in combination, they must be in the following order:

```
#~`*_+Combined style+_*`~#
```

Subscript cannot be combined with superscript. They are both ignored
in the middle of monospace text. Double format markers can be used for
portions of the text as long as it is interpreted by the generator.

### Breaks

Horizontal line:

   ---

Page break (not visible in the browser if the output is a HTML document):

   <<<

Arcadam tries to break the text at a natural place between pages, like the end of a paragraph.
Add ">>>" at the end of the line to prevent this behaviour in a specific place.
That may force a page break in the middle of a paragraph.

### Hyperlinks

[code=markdown]
```
[Go to Products page on this site](/Products.html)

[Go to Offers page in current path](Offers.html)

[Go to an arbitrary webpage](https://www.github.com)

[#anchor]:
> Part 1: This text is selected by the anchor.

[Go to Part 1](#anchor)
```

The text inside square brackets becomes a hyperlink which loads the content
specified in the round brackets. If the square brackets are only [?] or empty
then the address is shown as link. If the round brackets are empty and the 
text matches a section title then the link goes to that section.

To make a hyperlink to a file generated by Arcadam replace the file extension
with an asterisk "*". It will be automatically set to the file extension
associated with the output format.

When the output format allows it, footnotes +{^}+ and bibliographic references
+{>}+ are also hyperlinks. The initial ">" on the line that follows a marker is optional.

Example:

[code=markdown]
```
There are contractual implications to this statement.{^terms}

[^terms]:
> Please refer to our Terms and Conditions {>T&C} for more information.
```

### Inline Content

[code=markdown]
```
= sample image
[!image Arcadam logo](Arcadam-logo.png)

The Github mascot: [?image Github](octocat.jpg)
```

Use the "image" [custom control](#customisation) to insert an image or the "video" custom control to insert a video.
The word should have "!" in front to put the content in a new block
or it should have "?" in front for content floating in line with the text.

The remainder of the hyperlink text is used as the "alt" label in HTML.

Content captions are set using a [Block Title]().

### Lists

```
1. Number one
. Number two
. Number three

* First bullet
* Second bullet
* Third bullet

Item 1:: First description
Item 2:: Second description
Item 3:: Third description
```

Number 1 for the first item is optional and no other number is permitted.
A list that immediately follows an item from another list is automatically
nested. Similarly, an indented list item that immediately follows a
non-indented list item is automatically nested. Differences in the level
of whitespace has no effect.

An indented list cannot start in the middle of an indented paragraph, there must be an empty line in-between.
Ordered and unordered list markers can be repeated to indicate the level,
just like [headers](). Additional levels can be used in a
description list by adding another ":" each time.

Note that these levels are not enforced so there could be a list level 1 +(*)+
nested inside a list level 2 +(**)+. It is good style to match the marker
level with the nesting level of the list.

Example:

```
1. This is number one
* It has two bullet points
* This is the second bullet
. This is number two
  . This is a sublist
  . with three elements
  . This is the third element
  .. Other list nested inside

[list]
1. The list attribute forces a
new list to start up
```

Use "+" to force a list item on multiple lines. If it is used on an empty
line, that starts a new paragraph inside the list item. If "+" is
non-indented but the following text is indented, a code block is added
to the list item.

### Enumerations

The dash "-" at the start of a line is reserved for an enumeration. An enumeration item does not behave like a list item.
In particular it does not allow nesting and does not allow leading whitespace unless it is an indented paragraph.

In contrast with a list, an enumeration can appear in the middle of an indented paragraph.

Example:

```
Choose a size:
- short
- regular
- large
```

### Styled Blocks

Code blocks (monospaced):

[code]
....
  Indented text without
  line breaks is added 
  to a code block
  
  Normal text after a code block
  +
  That is another paragraph.
  
  A second code block starts here

```
Another way to create
a code block delimited
with ```
```

  ```
  An indented code block
  can also be delimited.
  
  It allows empty lines
  ```
....

Other blocks:

```
____
Quote text using
underscores
____

====
Example block used to
enclose an example
====

****
Sidebar block used to
expand on a topic or
highlight an idea
****

....
Content block for text
content understood by a
plug-in or external app
....
```

### Tables

```
|===
| Header 1
| Header 2
| Header 3
|:
| Row 1 Column 1 | Row 1 Column 2
| Row 1 Column 3

| Row 2 Column 1
2+| Row 2 Merged columns 2, 3
|===
```

A line starting with "|:" separates the header row from the following rows.
If that line is missing the table has no headers by default.
The only additional content allowed on the headers separation line is a
sequence of characters containing only "|", ":" and "-".

Each new row should start on a new line. If a row is split in multiple lines
there should be an empty line before the next row.

Arcadam markup can be used inside a table cell.
When the contents of a cell are written on multiple lines then the start of
next cell must be in a normal paragraph or on a new line.
If there is no space between "|" and the text that follows, the generator doesn't
interpret the contents of the cell until another "|" or the end of the line.

Other table styles:

```
,===
Header 1,Header 2,Header 3
|-
Row 1 Column 1,Row 1 Column 2,Row 1 Column 3
Row 2 Column 1,Row 2 Column 2,Row 2 Column 3
,===
```

```
:===
Header 1:Header 2:Header 3
|-
Row 1 Column 1:Row 1 Column 2:Row 1 Column 3
Row 2 Column 1:Row 2 Column 2:Row 2 Column 3
:===
```

### Forms

```
[form]
====
= Field label
[!input Default value]

[checkbox]
|+| Checkbox description
| | Unchecked checkbox

[options,value="choice 2"]
* choice 1
* choice 2
* choice 3

= Picker label
[picker]
Any valid Arcadam content

[?submit Send](target) [?cancel](home) [?clear]()
====
```

A form layout has two columns, one for labels and one for form elements.
An input field label or a picker label appears in the first column while
a checkbox description or text for an option appears in the second column.

All form elements can have a value. If an element also has an id then the
value becomes a replacement value using the id of the element as key. In case of
a checkbox, the replacement value is only defined when the checkbox is
checked.

Buttons have an action and are displayed when the output format allows
user interaction. The "submit" action sends the replacement values set in
the form to the target. The "cancel" action abandons the form and loads
the target. The "clear" action clears all the selections. The "call"
action sends information about the button to a predefined function with
the name that follows and with the target as parameter.

The cancel and clear buttons show a dialog asking for confirmation
if the user made any changes. A button can be activated by clicking a
picture as described in [Block Title]().

### Tabs

```
[tabset]
--
[tablist,id=maintab,value=Products]
* Products
* Portfolio
* Contact

[tab="maintab:Products"]
****
This is the products tab
****

[tab="maintab:Portfolio"]
****
This is the portfolio tab
****

[tab="maintab:Contact"]
****
This is the contact tab
****
--
```

If a block title is defined for a tab then that replaces the item in the
tablist for the tab title.

When the output format allows user interaction then the chosen tab is
displayed and other tabs display only their titles. Tabset content that
is not a tab is not displayed.

In other cases, the generator outputs all the tabs in the tab list as
well as tabset content. That is useful to insert page breaks between
tabs. The tablist is always hidden.

To enable user interaction a tablist must be defined and the corresponding tablist
entry must be specified for each tab. A numbered list can be used instead of a bullet
list to select the tab by a number, or a description list to select it by
a term. The tablist "value" attribute defines the initial tab selection.

### Mathematical Notation

```
= Proof for [this triangle](http://www.cut-the-knot.org/pythagoras/proof31.gif) \
where {`a}, {`b} and {`c} are the side lengths. 
....
// Comments, replacement values and callouts are allowed
mtable(
  msup(\( a + b \) : 2) ` = ` msup(c 2) + 4 &sdot \( mfrac(1 : 2) * a * b \)
  : msup(a 2) + 2 * a * b + msup(b 2) ` = ` msup(c 2) + 2 * a * b
  : msup(a 2) + msup(b 2) ` = ` msup(c 2)
)
....

....
  msub("C" x) msub("H" (2 y))
  mover(&rightarrow : \( "burned in O~2~" \))
  x _ "CO~2~" + y _ "H~2~O"
....

Using half angle formula:
{`tan #(mfrac(π 12)) = mfrac(1 - cos #(mfrac(π 6)) : sin #(mfrac(π 6))) = 2 - msqrt(3)}
```

[Result](lab/MathML.jpg)

By default a content block contains Arcadam mathematical notation.

The mathematical notation uses a human-readable form of MathML. MathML
entities written with a "&" are supported as well as equivalent Unicode
characters to write complex formulas. Spaces are required.

Attributes can be applied by appending a tilde "~" and a replacement key name to any object.
The replacement value contains the attributes.
Formulas can be aligned in a table-like matrix using "mtable" with the backtick "`" as cell separator and the colon ":" as row separator.

Symbols with a special meaning are:

```
;     invisible comma
*     invisible times
_     horizontal space
#     apply function
#( )  apply function with brackets
:     group or row separator
`     cell separator
" "   regular text
( )   align contents in a row
{ }   replacement key name
[ ]   reserved
//    comment
```

### Customisation

Arcadam offers custom content blocks, custom controls, custom elements and custom markers.

```
[content=text/html]
....
<strong>&quot;Hello!&quot;</strong>
....

[!type Standalone control](additional info)

Inline control: [?type Optional details](brackets required here)

{@ custom element}

[@custom marker]:
```

When the content block type contains "/" it is considered a MIME type.

A standalone custom control must be on its own line and the end brackets are optional.
On the other hands, the end brackets are required even if they are empty for an inline custom control.

A custom element can be used anywhere. It always starts with a special character.
Note that there is a limited choice of special characters so an inline custom control can be used instead when adding a customisation.

A custom marker applies to the following paragraph or block. It must be on its own line.
A custom marker always starts with a special character. The optional ">" symbol at the beginning of the next line is removed in the output.

### Block Title

[code=markdown]
```
= Fruit basket
,===
apples,oranges,pears
,===

= A mountain sunset on [Flickr](https://www.flickr.com/photos/javh/5448336655)
[width=200,height=100]
[!image Sunset](sunset.jpg)
```

A block title starts with "=" and a space. It comes before the
attributes.

If a block title is added to a block image, it is used as caption.
Additionally, if the image caption contains a link then clicking on the
image loads the (first) link. If it is reduced to a link without text
then clicking the image loads the link but there is no caption displayed.

That can be used to activate a custom control with an image click.

### Escape character

The backslash "\\" is used to prevent the generator from interpreting the
following character specially.

Example:

   \* not a bullet list!

See also [Text Formatting]() to prevent format markers from
being interpreted over a span of text using "+".

### Replacement values

   :key:key-name value to be inserted

Once defined, replacement values can be added anywhere using the key name.

Example:

[code=markdown]
```
Using the {key-name}

[{key-name}](/index.html)
```

The key name is replaced with the value to be inserted.

### Attributes

An attribute is written inside square brackets and applies to the immediate following paragraph or block.

Additional attributes can be applied using commas to separate them.

Example:

[code=html]
```
[code=xml,.extract]
  <root>
    <element>
      This is XML text which 
      can be colourised
    </element>

[NOTE]
====
This is important.
====
```

Some attributes can take a value. If the value contains any special characters it should be enclosed in double quotes.

Example:

   [rows=">h,^,^"]

If the attribute name starts with a dot "." and a stylesheet is defined then the specified style class is applied.

Style class attribute can be used in the middle of text by highlighting the part of the text they apply to.

Example:

   This paragraph contains #underlined text#{.underline}.

### Include

[code=markdown]
```
[!include region](Shared-file.arcd)
```

Use "!include" as the text of a hyperlink to substitute it with the contents
of an Arcadam file found at the specified location.

The hyperlink text may provide a tag name so only the designated
region of the Arcadam file is inserted instead of the whole contents.

Note that for security reasons, including a file from an arbitrary location
is disabled by default.

### Tags

The begin and end tags define a named region for include:

[code]
....
{:begin region}
This text can be included
on its own
{:end region}

```
Inside a code block, a named region
// {:begin coderegion}```
is defined using begin and end tags
before a code block marker that ends
// {:end coderegion}```
the line.
```
....

### Callouts

[code=ruby]
....
[code=ruby]
```
require 'sinatra'
# {1}```

get '/hi' do
  # {2}```
  "Hello World!"
  # {3}```
end
```

[?info Import](1):: Library import
[?info Mapping](2):: URL mapping
[?info Response](3):: HTTP response body
....

For automatic callout numbering use `{#}` and `(#)` instead of numbers.
Allowed numbers go from 0 to 9 and can be replaced in the output to keep them in sequence.
The same number can be used multiple times to indicate that the information relates to more than one line.

When it encounters callouts in a code block, the generator inserts
the callout symbols in the line above and the entire line which
contains callouts is deleted.

If the deleted line starts with a known block comment marker, the
generator looks for a matched closing comment marker at the
beginning of next line and deletes that too, for example `/*` and
the closing comment marker `*/` in C.

### Comments

```
// Line comment

////
Comment 
block
////
```

Comments are for information only.

### Localisation

Arcadam documents can be localised for an international audience.

Define the "translations" replacement value to enable it:

   :key:translations cn en es fr jp kr ru

This tells the generator to look for translations in the listed
directories.

Localisation files contain the text to translate with
synchronisation marks `@` which serve as placeholders for
untranslatable text. These marks always appear at the start of
a line.

The following are included in the translation:

* formatting
* hyperlinks and custom controls (images and buttons)
* markers and custom elements (bibliography, footnotes and anchors)
* callouts
* user-defined replacement values
* comments

By default, code and content blocks are excluded. To include a code block
use the "localize" attribute:

[code]
....
[localize=Y]
```
This will be translated.
```

```
Use a localize tag inside a code
// {:localize Y +1}```
block to translate the line above.
You can also extend the selection
by adding a number of lines below
the tag that should be translated.
```
....

Conversely, the attribute can be used to prevent the translation
of text:

```
[localize=N]
This must not be translated.
```

If applied to an include, it prevents the generator from looking
for a matching localisation file. Instead, the include link is
added to the translation so that it can be customised for each
locale.

### Transformation Steps

The generator applies the following steps in order to transform the
contents of the document:

====
_apply_ - apply markers and attributes

_localize_ - localise the text using translations (if
enabled)

_convert_ - replace special characters with their corresponding
entities (`<`, `>` and `&` for HTML). This step also converts
custom content (for example math to MathML) and enables syntax highlighting in code blocks

_customize_ - process callouts, includes, custom elements and custom controls

_format_ - apply inline text formatting

_replace_ - put replacement values in place of key names

_symbols_ - replace sequences of characters with symbols, for example
replace `->` with →

_layout_ - process pages breaks, enumerations and the line break character `+`

====

The current style class controls which transformation steps are
applied. For example, code blocks use the ".verbatim" style class
which only does the _customize_ and _convert_ transformations.

To choose which steps are applied for a particular style class, define
a special replacement value called "steps" followed by the style class.

Example:

   :key:steps.formatted substitute, format, symbols
